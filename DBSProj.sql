CREATE DATABASE IF NOT EXISTS `HotelManagementSystem` /*!40100 DEFAULT CHARACTER SET
utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT
ENCRYPTION='N' */;
#creating the database HotelManagementSystem
use HotelManagementSystem;
show tables;
#creating the table room_rate containing different types of room and price
CREATE TABLE IF NOT EXISTS room_rate (
  
  room_type VARCHAR(50) PRIMARY KEY,
  cost INT

 
);

#creating the table room
CREATE TABLE IF NOT EXISTS rooms (
  room_no INT PRIMARY KEY,
  room_status VARCHAR(50),
  room_type VARCHAR(50),
  staff_alloted VARCHAR(50),
  foreign key (room_type) references room_rate(room_type)
 
);
#creating the guests table


CREATE TABLE IF NOT EXISTS guests (
  guest_id INT NOT NULL AUTO_INCREMENT,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  address VARCHAR(100),
  phone_no VARCHAR(20),
  PRIMARY KEY (guest_id)
);

#creating the staff table
CREATE TABLE IF NOT EXISTS staff (
  staff_id INT  AUTO_INCREMENT,
  first_name VARCHAR(50),
  last_name VARCHAR(50),
  address VARCHAR(100),
  phone_no VARCHAR(20),

  PRIMARY KEY (staff_id)
);
#creating the service_rate table containing service and its charge
CREATE TABLE  IF NOT EXISTS service_rate (
  
  service VARCHAR(50) PRIMARY KEY,
  service_charge INT
  
 
);

#creating the roomserviceorders table which contains the list of all the orders from a room
CREATE TABLE IF NOT EXISTS roomserviceorders (
  service_ID INT PRIMARY KEY  auto_increment,
  service VARCHAR(50),
  room_no INT,
  quantity INT,
  foreign key(room_no) REFERENCES rooms(room_no),
  FOREIGN KEY (service) REFERENCES service_rate(service)
 
);





#creating a bills table which contains the bill generated by room expense+ all the orders henceforth done
CREATE TABLE  IF NOT EXISTS Bills (
  Bill_ID INT primary key auto_increment,
  cost_type VARCHAR(50) NOT NULL ,
  amount INT NOT NULL default 0,
  Bill_status VARCHAR(50) NOT NULL,
  room_no INT NOT NULL,
  FOREIGN KEY (room_no) REFERENCES rooms(room_no)
  
);
#create a reservation table 

CREATE TABLE IF NOT EXISTS  Reservation(
  Reservation_ID INT  primary key auto_increment,

  guest_id INT NOT NULL,
  room_no INT NOT NULL,
  Check_in DATE NOT NULL,
  Check_out DATE NOT NULL ,
  Reservation_status VARCHAR(50) NOT NULL,
  FOREIGN KEY (room_no) REFERENCES rooms(room_no),
  FOREIGN KEY(guest_id) REFERENCES guests(guest_id) ON DELETE cascade ON update cascade
  );
  #creating the table allots which marks the relation between staff and room
CREATE TABLE  IF NOT EXISTS Allots (
  staff_id INT ,
  room_no INT,
  PRIMARY KEY (staff_id,room_no),
  FOREIGN KEY(staff_id) references staff(staff_id),
  FOREIGN KEY(room_no) references rooms(room_no)
  
   
  
  
);
    

#procedure for viewing room
DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE
`view_room`(IN occupancy VARCHAR(10))# takes which kind of room you want to see
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'view occupied or vacant as demanded'
BEGIN
select rooms.room_no,rooms.room_type from HotelManagementSystem.rooms
where room_status=occupancy;
END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE #searching for a guest using guest_id
`search_guest`(IN guest_ID INT)
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Search a guest'
BEGIN
select * from HotelManagementSystem.guests where guests.guest_id=guest_ID;

END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE #searching for a staff member using staff_id
`search_staff`(IN staff_ID INT)
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Search a staff'
BEGIN
select * from HotelManagementSystem.staff where staff.staff_id=staff_ID;

END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`view_guest`()
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'view all  guests'
BEGIN
select * from HotelManagementSystem.guests;

END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`view_staff`()
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'view all staff'
BEGIN
select * from HotelManagementSystem.staff;

END$$
#procedure for toggling between room status
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`update_roomstatus`(IN room_no INT)
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'update room status'
BEGIN
UPDATE HotelManagementSystem.rooms
SET rooms.room_status=(CASE 
WHEN room_status="VACANT" then "OCCUPIED"
else "VACANT"
END) WHERE rooms.room_no=room_no;
END$$
#procedure for finding the total revenue generated by different rooms
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`view_roomsrevenues`()
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'view the total amount by different rooms'
BEGIN
select b.room_type,SUM(a.amount) from rooms b left join bills a 
ON b.room_no=a.room_no group by b.room_type;
END$$
#function for finding if the check out day has passed or not
CREATE DEFINER=`root`@`localhost` FUNCTION 
`overdue`(return_date DATE) RETURNS varchar(3) CHARSET
utf8mb4
 DETERMINISTIC
BEGIN
 DECLARE sf_value VARCHAR(3);
 IF curdate() > return_date
 THEN SET sf_value = 'Yes';
 ELSEIF curdate() <= return_date
 THEN SET sf_value = 'No';
 END IF;
 RETURN sf_value;
 END$$

#procedure for generating the total bill for a specific guest
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`bill_generate`(IN guest_id INT
)
 READS SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Generating bill of a guest.'
BEGIN
select SUM(a.amount) as payable_amount  from Reservation b  natural join bills a 
where b.guest_id=guest_id && a.Bill_status="due"&& overdue(b.check_out)='No';


END$$
#procedure for alloting a specific staff member to a room
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`insertallots`(IN staff_id INT,IN room_no INT)


 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Alloting Staff'
BEGIN
INSERT INTO Allots(staff_id,room_no)
Values (staff_id,room_no);
UPDATE rooms
SET staff_alloted="YES" where rooms.room_no=room_no;


END$$
 #procedure for booking a room .This manages all the changes in the different tables happening after a room is booked 
 CREATE DEFINER=`root`@`localhost` PROCEDURE 
`Book_room`(IN guest_id INT,IN room_no INT,IN check_in DATE,IN check_out DATE
)
 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Booking a room'
BEGIN
INSERT INTO Reservation(guest_id,room_no,check_in,check_out,Reservation_status)
Values (guest_id,room_no,check_in,check_out,"ACTIVE");#new reservation created
call update_roomstatus(room_no);
INSERT INTO Bills(room_no,cost_type,amount,Bill_status)#new room_bill is created for the booking

select room_no,"ROOM",datediff(check_out,check_in)*a.cost,"DUE"#datediff finds the difference bewteen the two dates and multiplies it by the daily charge to find the total bill
from room_rate a natural join rooms b where b.room_no=room_no;




END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE # all the bookings undone
`Cancel_booking`(IN guest_id INT,IN room_no INT,IN check_in DATE,IN check_out DATE
)
 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Cancelling the booking'
BEGIN
DELETE FROM  Reservation
where Reservation.guest_id=guest_id && Reservation.room_no=room_no && Reservation.check_in=check_in && Reservation.check_out=check_out;
UPDATE Rooms SET room_status="VACANT" where Rooms.room_no=room_no;
DELETE  FROM Bills
where Bills.room_no=room_no && Bills.cost_type="ROOM" && Bills.Bill_status="DUE";






END$$




CREATE DEFINER=`root`@`localhost` PROCEDURE 
`Post_Bill_payment`(IN guest_id INT #this procedure is used after all the bills are paid .It puts bill status as PAID reservation as past and also the room occupancy as vacant
)
 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'Activities post billpayment'
BEGIN
UPDATE  bills
set bill_status="PAID" where bill_id in
(select b_id from(
(select a.bill_id as b_id from Reservation b  natural join bills a 
where b.guest_id=guest_id && a.Bill_status="due"&& datediff(curdate(),b.check_out)=0 )) as c);#datediff(curdate(),b.check_out)=0 is used to make sure that the due date has arrived 
UPDATE Reservation SET Reservation.reservation_status="PAST" where datediff(curdate(),Reservation.check_out)=0 && Reservation.guest_id=guest_id;
UPDATE Rooms set Room_status="VACANT" where room_no in
(select b_room from(
 (select a.room_no as b_room from rooms a natural join reservation b where b.guest_id=guest_id && datediff(curdate(),b.check_out)=0))as c);






END$$














CREATE TRIGGER  Bill_add AFTER INSERT ON roomserviceorders# this is a trigger which insures that upon the addition of any order in roomservicesorders table its corresponding bill is added in bills table
  FOR EACH ROW
  BEGIN 
    INSERT INTO BILLS(cost_type,amount,Bill_status,room_no)  
    SELECT new.service,p.service_charge*new.quantity,"due",new.room_no
    from service_rate p where p.service=new.service;
    END$$
CREATE DEFINER=`root`@`localhost` PROCEDURE 
`InsertRoomServiceOrders`(IN service VARCHAR(50),IN room_no INT,IN quantity INT)
 MODIFIES SQL DATA
 DETERMINISTIC
 SQL SECURITY INVOKER
 COMMENT 'RoomServiceOrder Insertion'
BEGIN
Insert into roomserviceorders(service,room_no,quantity)
values (service,room_no,quantity);
END$$





DELIMITER ;

  
  
 


 SET SQL_SAFE_UPDATES = 0;
 ####### SQL QUERIES PERFORM ###########
 #inserting guest
 INSERT INTO guests (first_name, last_name, address, phone_no)
VALUES ('John', 'Doe', '1234 Elm Street', '555-1234'),
       ('Jane', 'Smith', '5678 Oak Avenue', '555-5678'),
       ('Michael', 'Johnson', '7890 Maple Road', '555-7890'),
       ('Sarah', 'Williams', '4567 Birch Lane', '555-4567'),
       ('David', 'Brown', '2345 Pine Drive', '555-2345'),
       ('Emma', 'Taylor', '8765 Cedar Court', '555-8765'),
       ('Matthew', 'Lee', '3456 Redwood Way', '555-3456'),
       ('Olivia', 'Martin', '7891 Willow Street', '555-7891'),
       ('James', 'Anderson', '6789 Cedar Avenue', '555-6789'),
       ('Sophia', 'Jackson', '9876 Birch Road', '555-9876');
select* from guests;
#inserting the various types of rooms and their prices
INSERT INTO room_rate (room_type, cost)
VALUES ('Standard', 100.00),
       ('Deluxe', 150.00),
       ('Suite', 200.00),
       ('Economy', 80.00),
       ('Executive', 250.00);
#inserting the various rooms
select* from rooms;
INSERT INTO rooms (room_no, room_type, room_status, staff_alloted)
VALUES ('101', 'Standard', 'Vacant', 'No'),
       ('102', 'Deluxe', 'Vacant', 'No'),
       ('103', 'Suite', 'Vacant', 'No'),
       ('104', 'Standard', 'Vacant', 'No'),
       ('105', 'Deluxe', 'Vacant', 'No'),
       ('201', 'Standard', 'Vacant', 'No'),
       ('202', 'Deluxe', 'Vacant', 'No'),
       ('203', 'Suite', 'Vacant', 'No'),
       ('204', 'Standard', 'Vacant', 'No'),
       ('205', 'Deluxe', 'Vacant', 'No'),
       ('301','Economy','Vacant','No'),
       ('302','Executive','Vacant','No'),
	   ('303','Executive','Vacant','No'),
	   ('304','Economy','Vacant','No'),
       ('305','Executive','Vacant','No');
#inserting the various services and their price
INSERT INTO service_rate (service, service_charge)
VALUES ('Mini Bar', 12.99),
       ('In-Room Dining', 20.50),
       ('Housekeeping', 10.00),
       ('Laundry', 7.99),
       ('Room Service', 15.50),
       ('Wake-up Call', 5.00),
       ('Extra Bed', 25.00),
       ('Late Check-out', 30.00),
       ('Safe Deposit Box', 8.99),
       ('Valet Parking', 18.00),
       ('Breakfast Order', 9.99),
       ('Lunch Order', 15.00),
       ('Dinner Order', 20.00);
#inserting staff
INSERT INTO staff (first_name, last_name, address, phone_no)
VALUES ('John', 'Doe', '1234 ABC Street, Bangalore', '9876543210'),
       ('Jane', 'Smith', '5678 XYZ Road, Mumbai', '8765432109'),
       ('Amit', 'Patel', '7890 PQR Lane, Delhi', '7654321098'),
       ('Priya', 'Sharma', '2345 LMN Avenue, Kolkata', '6543210987'),
       ('Rajesh', 'Gupta', '4567 UVW Circle, Chennai', '5432109876'),
       ('Sneha', 'Singh', '6789 XYZ Street, Hyderabad', '4321098765'),
       ('Vikram', 'Rao', '8901 ABC Road, Pune', '3210987654'),
       ('Nisha', 'Thakur', '1234 PQR Avenue, Ahmedabad', '2109876543'),
       ('Sanjay', 'Kumar', '3456 LMN Road, Jaipur', '1098765432'),
       ('Anita', 'Verma', '5678 UVW Lane, Chandigarh', '0987654321');
#view vacant rooms
call view_room("VACANT");
#book a room
call book_room(13,103,'2023-04-09','2023-04-11');
#cancel booking
call Cancel_booking(13,103,'2023-04-09','2023-04-11');
#viewing all staff
select * from staff;
#assigning staff to room
call insertallots(11,103);

call book_room(13,105,'2023-04-09','2023-04-11');
call book_room(13,201,'2023-04-09','2023-04-11');
#enetering the customer orders
call InsertRoomServiceOrders("Lunch Order",201,1);
call InsertRoomServiceOrders("Laundry",105,1);
call book_room(12,204,'2023-04-09','2023-04-12');
call InsertRoomServiceOrders("Breakfast Order",204,1);
call InsertRoomServiceOrders("Laundry",204,1);
#generating the bill of the customer
call bill_generate(13);
#viewing the revenue generated by different rooms
call view_roomsrevenues();
select * from  rooms;
call update_roomstatus(105);
call view_room("OCCUPIED");
#marking the checkout of the guest
call Post_Bill_payment(13);




